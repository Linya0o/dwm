diff --git a/config.def.h b/config.def.h
index cb6ad36..ca57dba 100644
--- a/config.def.h
+++ b/config.def.h
@@ -43,6 +43,7 @@ static const Layout layouts[] = {
 	{ "[M]",      monocle },
 	{ "TT",       bstack },
 	{ "|M|",      centeredmaster },
+	{ "HH",       grid },
 	{ NULL,       NULL },
 };
 
@@ -81,6 +82,7 @@ static Key keys[] = {
 	{ MODKEY,                       XK_m,      setlayout,      {.v = &layouts[2]} },
 	{ MODKEY,                       XK_o,      setlayout,      {.v = &layouts[3]} },
 	{ MODKEY,                       XK_u,      setlayout,      {.v = &layouts[4]} },
+	{ MODKEY,                       XK_g,      setlayout,      {.v = &layouts[5]} },
 	{ MODKEY|ControlMask,		    XK_comma,  cyclelayout,    {.i = -1 } },
 	{ MODKEY|ControlMask,           XK_period, cyclelayout,    {.i = +1 } },
 	{ MODKEY,                       XK_space,  setlayout,      {0} },
diff --git a/dwm.c b/dwm.c
index f7dd8c8..4072b17 100644
--- a/dwm.c
+++ b/dwm.c
@@ -239,6 +239,7 @@ static int xerrorstart(Display *dpy, XErrorEvent *ee);
 static void zoom(const Arg *arg);
 static void bstack(Monitor *m);
 static void centeredmaster(Monitor *m);
+static void grid(Monitor *m);
 
 /* variables */
 static const char broken[] = "broken";
@@ -1832,6 +1833,35 @@ centeredmaster(Monitor *m)
 	}
 }
 
+void
+grid(Monitor *m)
+{
+	unsigned int i, n, cx, cy, cw, ch, aw, ah, cols, rows;
+	Client *c;
+
+	for (n = 0, c = nexttiled(m->clients); c; c = nexttiled(c->next))
+		n++;
+
+	/* grid dimensions */
+	for (rows = 0; rows <= n / 2; rows++)
+		if (rows * rows >= n)
+			break;
+	cols = (rows && (rows - 1) * rows >= n) ? rows - 1 : rows;
+
+	/* window geoms (cell height/width) */
+	ch = m->wh / (rows ? rows : 1);
+	cw = m->ww / (cols ? cols : 1);
+	for (i = 0, c = nexttiled(m->clients); c; c = nexttiled(c->next)) {
+		cx = m->wx + (i / rows) * cw;
+		cy = m->wy + (i % rows) * ch;
+		/* adjust height/width of last row/column's windows */
+		ah = ((i + 1) % rows == 0) ? m->wh - ch * rows : 0;
+		aw = (i >= rows * (cols - 1)) ? m->ww - cw * cols : 0;
+		resize(c, cx, cy, cw - 2 * c->bw + aw, ch - 2 * c->bw + ah, False);
+		i++;
+	}
+}
+
 void
 togglebar(const Arg *arg)
 {
